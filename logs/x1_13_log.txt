Magma V2.28-3     Wed Jun  5 2024 14:34:29 on euler    [Seed = 488316977]
Type ? for help.  Type <Ctrl>-D to quit.
> /*
>   This script runs the computations for X1(13) described in Section 3 of the paper
> */
> 
> // We only care about the twists of positive rank; see Corollary 3.7 of the paper
> // By results of Krumm we need d > 0 and d = 1 mod 8, this is Prop. 3.1 of the paper
> 
> positive_rank := [-9879, -9815, -9727, -9719, -9670, -9663, -9638, -9615, -9565, -9461, -9307, -9095, -8819, -8641, -8419, -8399, -7863, -7727, -7694, -7663, -7630, -7199, -6641, -6431, -6423, -636\
2, -6257, -6009, -5989, -5855, -5757, -5597, -5394, -5293, -5237, -5095, -4839, -4670, -4605, -4603, -4454, -4442, -4439, -4289, -4233, -4139, -4087, -4055, -3782, -3597, -3463, -3407, -3390, -3385, \
-3226, -3223, -3071, -3047, -2866, -2683, -2631, -2507, -2441, -2437, -2426, -2339, -2335, -2255, -2135, -2031, -1865, -1695, -1671, -1637, -1559, -1535, -1199, -1090, -935, -901, -779, -703, -671, -\
527, -510, -411, -377, -366, -359, -311, -303, -302, -287, -174, -29, 1, 17, 79, 113, 145, 193, 313, 409, 442, 481, 493, 646, 673, 718, 745, 957, 1153, 1173, 1185, 1271, 1385, 1417, 1457, 1465, 1510,\
 1537, 1609, 1659, 1713, 1870, 1921, 1943, 1955, 2038, 2089, 2161, 2257, 2265, 2427, 2433, 2553, 2629, 3005, 3057, 3131, 3193, 3241, 3273, 3361, 3473, 3478, 3535, 3585, 3649, 3769, 3878, 3961, 4033, \
4315, 4354, 4449, 4549, 4641, 5026, 5095, 5241, 5242, 5289, 5394, 5449, 5593, 5777, 5781, 6139, 6162, 6217, 6351, 6393, 6409, 6582, 6641, 6769, 6806, 7017, 7143, 7234, 7382, 7521, 7549, 7671, 7694, 7\
802, 8065, 8081, 8113, 8122, 8466, 8473, 8578, 8579, 8641, 9141, 9265, 9418, 9501, 9689, 9865, 9877, 9881];
> positive_rank2 := [d : d in positive_rank | d gt 0 and d mod 8 eq 1];
> 
> //y^2=f is isomorphic to  X_1(13)
> R<x> := PolynomialRing(Rationals());
> f := R![1, 2, 1, 2, 6, 4, 1];
> 
> // The following  code runs the Two-cover descent routine, see Section 3.3 of the paper
> empty_selmer := [];
> nonempty_selmer := [];
> for d in positive_rank2 do
for>   print(d);
for>   C := HyperellipticCurve(d*f);
for>   Sel2 := TwoCoverDescent(C);
for>   if #Sel2 eq 0 then
for|if>     Append(~empty_selmer, d);
for|if>   else
for|if>     Append(~nonempty_selmer, d);
for|if>   end if;
for> end for;
1
17
113
145
193
313
409
481
673
745
1153
1185
1385
1417
1457
1465
1537
1609
1713
1921
2089
2161
2257
2265
2433
2553
3057
3193
3241
3273
3361
3473
3585
3649
3769
3961
4033
4449
4641
5241
5289
5449
5593
5777
6217
6393
6409
6641
6769
7017
7521
8065
8081
8113
8473
8641
9265
9689
9865
9881
> print(empty_selmer);
[ 145, 409, 745, 1185, 1385, 1457, 1465, 1537, 1713, 2265, 2433, 2553, 3057, 
3193, 3241, 3273, 3361, 3473, 3585, 3649, 4033, 4449, 4641, 5241, 5289, 5593, 
5777, 6393, 6409, 6769, 7017, 7521, 8065, 8081, 8113, 9265, 9865 ]
> print(nonempty_selmer);
[ 1, 17, 113, 193, 313, 481, 673, 1153, 1417, 1609, 1921, 2089, 2161, 2257, 
3769, 3961, 5449, 6217, 6641, 8473, 8641, 9689, 9881 ]
> print(#nonempty_selmer);
23
> 
> // The following code just searches for points on the output of the previous\
 step
> extra_point_ds := [];
> extra_point_list := [* *];
> unsolved := [];
> for d in nonempty_selmer do
for>   C:=HyperellipticCurve(d*f);
for>   points := Points(C: Bound:=10000);
for>   if #points gt 0 then
for|if>     print "====", d, #points, "====";
for|if>     print points;
for|if>     Append(~extra_point_list, <d, points>);
for|if>     Append(~extra_point_ds, d);
for|if>   else
for|if>     Append(~unsolved, d);
for|if>   end if;
for> end for;
==== 1 6 ====
{@ (1 : -1 : 0), (1 : 1 : 0), (-1 : -1 : 1), (-1 : 1 : 1), (0 : -1 : 1), (0 : 1 
: 1) @}
==== 17 6 ====
{@ (1 : -17 : 1), (1 : 17 : 1), (-2 : -17 : 1), (-2 : 17 : 1), (-1 : -17 : 2), 
(-1 : 17 : 2) @}
==== 113 6 ====
{@ (2 : -16837 : 11), (2 : 16837 : 11), (-13 : -16837 : 2), (-13 : 16837 : 2), 
(-11 : -16837 : 13), (-11 : 16837 : 13) @}
==== 193 6 ====
{@ (1 : -193 : 2), (1 : 193 : 2), (-3 : -193 : 1), (-3 : 193 : 1), (-2 : -193 : 
3), (-2 : 193 : 3) @}
==== 313 6 ====
{@ (2 : -313 : 1), (2 : 313 : 1), (-3 : -313 : 2), (-3 : 313 : 2), (-1 : -313 : 
3), (-1 : 313 : 3) @}
==== 481 6 ====
{@ (9 : -19721 : 1), (9 : 19721 : 1), (-10 : -19721 : 9), (-10 : 19721 : 9), (-1
: -19721 : 10), (-1 : 19721 : 10) @}
==== 1153 6 ====
{@ (1 : -19601 : 8), (1 : 19601 : 8), (-9 : -19601 : 1), (-9 : 19601 : 1), (-8 :
-19601 : 9), (-8 : 19601 : 9) @}
==== 1417 6 ====
{@ (1 : -1417 : 3), (1 : 1417 : 3), (-4 : -1417 : 1), (-4 : 1417 : 1), (-3 : 
-1417 : 4), (-3 : 1417 : 4) @}
==== 2257 6 ====
{@ (3 : -2257 : 1), (3 : 2257 : 1), (-4 : -2257 : 3), (-4 : 2257 : 3), (-1 : 
-2257 : 4), (-1 : 2257 : 4) @}
==== 3769 6 ====
{@ (2 : -3769 : 3), (2 : 3769 : 3), (-5 : -3769 : 2), (-5 : 3769 : 2), (-3 : 
-3769 : 5), (-3 : 3769 : 5) @}
==== 3961 6 ====
{@ (15 : -241621 : 1), (15 : 241621 : 1), (-16 : -241621 : 15), (-16 : 241621 : 
15), (-1 : -241621 : 16), (-1 : 241621 : 16) @}
==== 5449 6 ====
{@ (3 : -5449 : 2), (3 : 5449 : 2), (-5 : -5449 : 3), (-5 : 5449 : 3), (-2 : 
-5449 : 5), (-2 : 5449 : 5) @}
==== 6217 6 ====
{@ (9 : -180293 : 7), (9 : 180293 : 7), (-16 : -180293 : 9), (-16 : 180293 : 9),
(-7 : -180293 : 16), (-7 : 180293 : 16) @}
==== 6641 6 ====
{@ (1 : -6641 : 4), (1 : 6641 : 4), (-5 : -6641 : 1), (-5 : 6641 : 1), (-4 : 
-6641 : 5), (-4 : 6641 : 5) @}
==== 9881 6 ====
{@ (4 : -9881 : 1), (4 : 9881 : 1), (-5 : -9881 : 4), (-5 : 9881 : 4), (-1 : 
-9881 : 5), (-1 : 9881 : 5) @}
> print(extra_point_ds);
[ 1, 17, 113, 193, 313, 481, 1153, 1417, 2257, 3769, 3961, 5449, 6217, 6641, 
9881 ]
> 
> // These are the values of d for which we needed to run the MW sieve.
> // The reader may see it in the log file (`x1_13_log.txt`).
> print(unsolved);
[ 673, 1609, 1921, 2089, 2161, 8473, 8641, 9689 ]
> 

Total time: 66.390 seconds, Total memory usage: 117.19MB
